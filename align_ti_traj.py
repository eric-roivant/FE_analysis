#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 14 09:41:41 2022

@author: eric Chen

@Email" eric.chen@roivant.com"

"""

#####

# This script is the align the trajectory from 3 replicate runs for each lambda 
# to investigate the comformatinal change relevant to the large SD in any lambda window
# The code is based on the directory tree generated by stx_bfe
####

# Step 1: read the yaml file to get the lambda windows

import sys

import subprocess

import glob

import yaml

## add module fire to path first, then we can import it
sys.path.append("/projects2/insite/eric.chen/anaconda3/envs/py36/lib/python3.6/site-packages")


import fire

def align_ti_traj(perturb_pair,lambda_value):
    """
    

    Parameters
    ----------
    lambda_value : float
        The lambda window you want to align its trajectory
        
    perturb_pair : string
        The perturbation pair in the format of comp0~comp1

    Returns
    -------
    Geneate the aligned trajectory for the lambda window at complex and solvent phase

    """
    
    config_file = glob.glob("*/*yaml")[0] ## all bfe yaml files should be same
    

    with open(config_file) as stream:
    
        configs=yaml.safe_load(stream)
    

    if lambda_value:

        print(f"align TI trajectory for {lambda_value} \n")
        lambda_wins=[lambda_value]
    else:
        print(f"every lambda trajectory will be aligned \n")

        lambda_wins = configs["ti"]["rbfe_vdw_lambdas"]
    
    atom_map = configs["morph"]["atom_mapping_mode"]

    perturb=f"{perturb_pair}_{atom_map}"


    # Step2 create the cpptraj input for both compelx and solvent phase


    phases = ["complex", "solvated"]
        
    for l in lambda_wins:
    
        for p in phases:
        
            run1 = f"./1/free_energy/{perturb}/{p}/vdw/{l}"            
            run2 = f"./2/free_energy/{perturb}/{p}/vdw/{l}"       
            run3 = f"./3/free_energy/{perturb}/{p}/vdw/{l}"        
            file = open("cpptraj.in","w+")
               
            args = [f"parm {run1}/prmtop\n", 
                  f"trajin {run1}/ti-1.nc 1 last 10 \n",
                  f"trajin {run2}/ti-1.nc 1 last 10 \n",
                  f"trajin {run3}/ti-1.nc 1 last 10 \n",
                  "strip :WAT,Na+,K+,Cl- \n",
                  f"rmsd solute first \n",
                  f"trajout {l}_{p}_{perturb_pair}_aligned.pdb \n",
                  "go \n",
                  "quit \n"]
            for line in args:

                file.write(line)
        
            file.close()
            command = ["cpptraj -i cpptraj.in"]
        
            cpptraj=subprocess.Popen(command,stdout=subprocess.PIPE,shell=True)
            #(output,err) = p.communicate()
            cpptraj.wait()
            print(f"cpptraj is completed for {p} \n")

            file=open("ti_traj.pml","w+")

            args=[f"load {l}_{p}_{perturb_pair}_aligned.pdb , {l}_{p}\n",
                  f"intra_fit {l}_{p}, 1 \n",
                  "smooth\n",
                  f"save {l}_{p}_{perturb_pair}_aligned.pse"
                  ]
            for line in args:
                file.write(line)
            file.close()
            command = ["/projects2/joao.ribeiro/dcv/pymol/bin/pymol -c ti_traj.pml"]
            p_pymol = subprocess.Popen(command,stdout=subprocess.PIPE,shell=True)
            p_pymol.wait()
            #print("The pymol pse file is successfully generated")

        
if __name__ == "__main__":
    
    fire.Fire(align_ti_traj)
    
    
    
    
